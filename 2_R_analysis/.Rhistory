cpd_data_strainA <- ductape_data$StrainA
cpd_data_strainA
# From the DuctApe output we can obtain the AV of each compound, and name it
# using the column "co_id" which is the compound code in Kegg
cpd_data_strainA <- ductape_data$StrainA
names(cpd_data_strainA) <- ductape_data$co_id
#
cpd_data_strainB <- ductape_data$StrainB
names(cpd_data_strainB) <- ductape_data$co_id
library(tidyverse)
library(ggsci)
library(ggpubr)
library(reshape2)
library(ggside)
library(ggdist)
library(FactoMineR)
library(factoextra)
library(pathview)
ductape_data <- read.table(file = "../1_DuctApe_workflow/phenome_combined.tsv",
header = F,
sep = "\t")
colnames(ductape_data) <- c("plate_id",
"well_id",
"chemical",
"category",
"moa",
"co_id",
"replica",
"CoInoculum",
"StrainA",
"StrainB")
ductape_data %>%
ggboxplot(x = "category", y = "CoInoculum", add = "jitter") +
ylab("Activity Value (AV)") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2)
ductape_data %>%
ggplot(aes(x = category, y = CoInoculum)) +
stat_halfeye(adjust = 0.5,
width = 0.5,
.width = 0,
justification = -0.4,
point_colour = NA,
fill = "grey70") +
geom_boxplot(width = .25,
outlier.shape = NA,
fill = "white") +
geom_point(aes(fill = category),
shape = 21,
size = 1.3,
alpha = .5,
position = position_jitter(seed = 1, width = .1)) +
theme_pubclean() +
ylab("Activity Value (AV)") +
xlab("Compound category") +
scale_fill_jama() +
stat_compare_means(method = "kruskal.test", label.x = 2) +
theme(legend.position="top",
legend.title = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(0.8, 'cm'),
axis.ticks.x=element_blank(),
axis.text.x=element_blank()) +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1)))
# Here we test the Carbon sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "carbon") %>%
ggboxplot(x = "variable", y = "value", add = "jitter") +
ylab("Activity Value (AV) on carbon sources") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11)
# Here we test the Nitrogen sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "nitrogen") %>%
ggboxplot(x = "variable", y = "value", add = "jitter") +
ylab("Activity Value (AV) on nitrogen sources") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11)
# Here we obtain a more elaborated visualization for the Nitrogen sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "nitrogen") %>%
ggplot(aes(x = variable, y = value)) +
stat_halfeye(adjust = 0.5,
width = 0.5,
.width = 0,
justification = -0.4,
point_colour = NA,
fill = "grey70") +
geom_boxplot(width = .25,
outlier.shape = NA,
fill = "white") +
geom_point(aes(fill = variable),
shape = 21,
size = 1.3,
alpha = .5,
position = position_jitter(seed = 1, width = .1)) +
theme_pubclean() +
ylab("Activity Value (AV) on nitrogen sources") +
xlab("Strain") +
scale_fill_jama() +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11) +
theme(legend.position="top",
legend.title = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(0.8, 'cm'),
axis.ticks.x=element_blank(),
axis.text.x=element_blank()) +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1)))
ductape_data %>%
filter(category == "nitrogen") %>%
select(c(3,8,9,10)) %>%
column_to_rownames(var = "chemical") %>%
t() %>%
PCA() -> PCA_nitrogen
# Basic biplot
fviz_pca_biplot(X = PCA_nitrogen)
# The argument "repel = T" allows to avoid overlapping labels of variables, but
# some label are lost.
fviz_pca_biplot(X = PCA_nitrogen,
repel = T)
# The fviz_contrib() fuction can be used to inspect variable contribution to
# each axis.
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
axes = 1)
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
top = 30,
axes = 1)
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
axes = 2)
# Import gene annotation data. This contains mapping of protein sequences to
# the Kegg ortholog. Can be obtained using the KAAS service
# (https://www.genome.jp/kegg/kaas/) while protein sequences can be obtained
# by any pipeline for assembled genome annotation. As the function for plotting
# also allow to record the copy numbers for each orthologs in the genome, we
# include a column with all values = 1
StrainA_gene <- read.table(file = "./StrainA_KAAS.csv",
header = T,
sep = ",")
# we need to build a "named vector" for input in the function below
gene_data_strainA <- StrainA_gene$Presence
names(gene_data_strainA) <- StrainA_gene$Ortholog
# Same as above for StrainB
StrainB_gene <- read.table(file = "./StrainB_KAAS.csv",
header = T,
sep = ",")
gene_data_strainB <- StrainB_gene$Presence
names(gene_data_strainB) <- StrainB_gene$Ortholog
# From the DuctApe output we can obtain the AV of each compound, and name it
# using the column "co_id" which is the compound code in Kegg
cpd_data_strainA <- ductape_data$StrainA
names(cpd_data_strainA) <- ductape_data$co_id
# Same as above for StrainB
cpd_data_strainB <- ductape_data$StrainB
names(cpd_data_strainB) <- ductape_data$co_id
# Here we obtain the annotated Kegg map.
pv.out.N <- pathview(gene.data = gene_data_strainA,
cpd.data = scale(cpd_data_strainA),
both.dirs = list(gene = FALSE, cpd = TRUE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 2),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainA.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
pv.out.N <- pathview(gene.data = gene_data_strainB,
cpd.data = scale(cpd_data_strainB),
both.dirs = list(gene = FALSE, cpd = TRUE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 2),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainB.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
StrainA_gene
ductape_data
# Here we obtain the annotated Kegg map.
pv.out.N <- pathview(gene.data = gene_data_strainA,
cpd.data = cpd_data_strainA,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 2),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainA.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
pv.out.N <- pathview(gene.data = gene_data_strainB,
cpd.data = cpd_data_strainB,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 2),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainB.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
# Here we obtain the annotated Kegg map.
pv.out.N <- pathview(gene.data = gene_data_strainA,
cpd.data = cpd_data_strainA,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainA.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
pv.out.N <- pathview(gene.data = gene_data_strainB,
cpd.data = cpd_data_strainB,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainB.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
gene_data_strainA
cpd_data_strainA
max(cpd_data_strainA)
hist(cpd_data_strainA)
hist(cpd_data_strainB)
scale(cpd_data_strainA)
# Same as above for StrainB
cpd_data_strainB <- ductape_data$StrainB
names(cpd_data_strainB) <- ductape_data$co_id
scale(cpd_data_strainA)
hist(cpd_data_strainB)
# Here we obtain the annotated Kegg map.
pv.out.N <- pathview(gene.data = gene_data_strainA,
cpd.data = cpd_data_strainA,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainA.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
pv.out.N <- pathview(gene.data = gene_data_strainB,
cpd.data = cpd_data_strainB,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainB.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
library(tidyverse)
library(ggsci)
library(ggpubr)
library(reshape2)
library(ggside)
library(ggdist)
library(FactoMineR)
library(factoextra)
library(pathview)
ductape_data <- read.table(file = "../1_DuctApe_workflow/phenome_combined.tsv",
header = F,
sep = "\t")
library(tidyverse)
library(ggsci)
library(ggpubr)
library(reshape2)
library(ggside)
library(ggdist)
library(FactoMineR)
library(factoextra)
library(pathview)
ductape_data <- read.table(file = "../1_DuctApe_workflow/phenome_combined.tsv",
header = F,
sep = "\t")
library(tidyverse)
library(ggsci)
library(ggpubr)
library(reshape2)
library(ggside)
library(ggdist)
library(FactoMineR)
library(factoextra)
library(pathview)
ductape_data <- read.table(file = "../1_DuctApe_workflow/phenome_combined.tsv",
header = F,
sep = "\t")
colnames(ductape_data) <- c("plate_id",
"well_id",
"chemical",
"category",
"moa",
"co_id",
"replica",
"CoInoculum",
"StrainA",
"StrainB")
ductape_data %>%
ggboxplot(x = "category", y = "CoInoculum", add = "jitter") +
ylab("Activity Value (AV)") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2)
ductape_data %>%
ggplot(aes(x = category, y = CoInoculum)) +
stat_halfeye(adjust = 0.5,
width = 0.5,
.width = 0,
justification = -0.4,
point_colour = NA,
fill = "grey70") +
geom_boxplot(width = .25,
outlier.shape = NA,
fill = "white") +
geom_point(aes(fill = category),
shape = 21,
size = 1.3,
alpha = .5,
position = position_jitter(seed = 1, width = .1)) +
theme_pubclean() +
ylab("Activity Value (AV)") +
xlab("Compound category") +
scale_fill_jama() +
stat_compare_means(method = "kruskal.test", label.x = 2) +
theme(legend.position="top",
legend.title = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(0.8, 'cm'),
axis.ticks.x=element_blank(),
axis.text.x=element_blank()) +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1)))
# Here we test the Carbon sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "carbon") %>%
ggboxplot(x = "variable", y = "value", add = "jitter") +
ylab("Activity Value (AV) on carbon sources") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11)
# Here we test the Nitrogen sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "nitrogen") %>%
ggboxplot(x = "variable", y = "value", add = "jitter") +
ylab("Activity Value (AV) on nitrogen sources") +
xlab("Compound category") +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11)
# Here we obtain a more elaborated visualization for the Nitrogen sources
ductape_data %>%
select(-replica) %>%
melt() %>%
filter(category == "nitrogen") %>%
ggplot(aes(x = variable, y = value)) +
stat_halfeye(adjust = 0.5,
width = 0.5,
.width = 0,
justification = -0.4,
point_colour = NA,
fill = "grey70") +
geom_boxplot(width = .25,
outlier.shape = NA,
fill = "white") +
geom_point(aes(fill = variable),
shape = 21,
size = 1.3,
alpha = .5,
position = position_jitter(seed = 1, width = .1)) +
theme_pubclean() +
ylab("Activity Value (AV) on nitrogen sources") +
xlab("Strain") +
scale_fill_jama() +
stat_compare_means(method = "kruskal.test", label.x = 2, label.y = 11) +
theme(legend.position="top",
legend.title = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(0.8, 'cm'),
axis.ticks.x=element_blank(),
axis.text.x=element_blank()) +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1)))
ductape_data %>%
filter(category == "nitrogen") %>%
select(c(3,8,9,10)) %>%
column_to_rownames(var = "chemical") %>%
t() %>%
PCA() -> PCA_nitrogen
# Basic biplot
fviz_pca_biplot(X = PCA_nitrogen)
# The argument "repel = T" allows to avoid overlapping labels of variables, but
# some label are lost.
fviz_pca_biplot(X = PCA_nitrogen,
repel = T)
# The fviz_contrib() fuction can be used to inspect variable contribution to
# each axis.
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
axes = 1)
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
top = 30,
axes = 1)
fviz_contrib(X = PCA_nitrogen,
xtickslab.rt = 90,
choice = "var",
axes = 2)
# Import gene annotation data. This contains mapping of protein sequences to
# the Kegg ortholog. Can be obtained using the KAAS service
# (https://www.genome.jp/kegg/kaas/) while protein sequences can be obtained
# by any pipeline for assembled genome annotation. As the function for plotting
# also allow to record the copy numbers for each orthologs in the genome, we
# include a column with all values = 1
StrainA_gene <- read.table(file = "./StrainA_KAAS.csv",
header = T,
sep = ",")
# we need to build a "named vector" for input in the function below
gene_data_strainA <- StrainA_gene$Presence
names(gene_data_strainA) <- StrainA_gene$Ortholog
# Same as above for StrainB
StrainB_gene <- read.table(file = "./StrainB_KAAS.csv",
header = T,
sep = ",")
gene_data_strainB <- StrainB_gene$Presence
names(gene_data_strainB) <- StrainB_gene$Ortholog
# From the DuctApe output we can obtain the AV of each compound, and name it
# using the column "co_id" which is the compound code in Kegg
cpd_data_strainA <- ductape_data$StrainA
names(cpd_data_strainA) <- ductape_data$co_id
# Same as above for StrainB
cpd_data_strainB <- ductape_data$StrainB
names(cpd_data_strainB) <- ductape_data$co_id
# Here we obtain the annotated Kegg map.
pv.out.N <- pathview(gene.data = gene_data_strainA,
cpd.data = cpd_data_strainA,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainA.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
pv.out.N <- pathview(gene.data = gene_data_strainB,
cpd.data = cpd_data_strainB,
both.dirs = list(gene = FALSE, cpd = FALSE),
bins = list(gene = 1, cpd = 15),
discrete = list(gene = TRUE, cpd = FALSE),
limit = list(gene = 1, cpd = 9),
species = "ko",
cpd.idtype = "kegg",
gene.idtype = "KEGG",
pathway.id = "00910",
out.suffix = "strainB.N",
keys.align = "y",
kegg.native = T,
key.pos = "topright")
ll
pwd
pwd()
